<?php

/**
 * hook_block_info implementation
 *
 * @return array
 */
function valhalla_blocks_block_info() {
  return array(
    'party_status' => array(
      'info' => t('Parti status'),
      'cache' => DRUPAL_NO_CACHE
    ),
    'party_constituency_status' => array(
      'info' => t('Valgkredsstatus'),
      'cache' => DRUPAL_NO_CACHE
    ),
  );
}


/**
 * hook_block_view implementation
 *
 * @param string $delta
 * @return array
 */
function valhalla_blocks_block_view($delta = '') {
  global $user, $language;

  $user_party_id = &drupal_static(__FUNCTION__);

  if (is_null($user_party_id)) {
    $user = user_load($user->uid);
    $user_party_id = empty($user->field_party[LANGUAGE_NONE][0]['tid']) ? FALSE : $user->field_party[LANGUAGE_NONE][0]['tid'];

    $admin_user = FALSE;
    if (user_access('administer valhalla')) {
      $admin_user = TRUE;
    }
  }

  $restrict_polling_stations = FALSE;
  if (!empty ($user->field_polling_station[LANGUAGE_NONE])) {
    $restrict_polling_stations = array();
    foreach ($user->field_polling_station[LANGUAGE_NONE] as $station) {
      $restrict_polling_stations[] = $station['nid'];
    }
  }
  $roles=array();
  $res = db_select('node', 'n')
                    ->distinct()
                    ->fields('n', array('nid', 'title'))   
                      ->condition('n.type', 'roles')
                    ->execute();

  while($rec = $res->fetchAssoc()) {
    $roles[$rec['nid']] = $rec['title'];
  }

  if (!user_access('administer volunteers') && (FALSE === $user_party_id)) {
    return array();
  }

  $block = array();
  switch ($delta) {
    case 'party_status':
      $block['content'] = '';

      // let administrators pic a party to see stats for
      if (TRUE === $admin_user) {
        $parties = array();

        $vid = db_query("SELECT vid FROM taxonomy_vocabulary WHERE machine_name = 'partier'")->fetchField();

        foreach (taxonomy_get_tree($vid) as $item) {
              $parties[] = '<span'.($user_party_id == $item->tid ? ' style="font-weight:bold;"' : '').'>' . l($item->name, 'valhalla/change/party/' . $item->tid) . '</span>';
            }
            $parties[] = '<span>' . l('alle', 'valhalla/change/party/0') . '</span>';
            $block['content'] .= '<div id="other-parties"><h3>Se status for liste:</h3><p>'.implode(', ', $parties).'</p></div>';
          }

        $grand_total = 0;

        foreach($roles as $nid =>$title){
          $query = db_select('field_data_field_role_n'.$nid, 'vr');
          $query->innerJoin('field_data_field_party_list', 'vp', 'vp.entity_id=vr.entity_id ' );
          $query->innerJoin('field_data_field_volunteers_pr_party_1', 'vpp', 'vpp.field_volunteers_pr_party_1_value=vr.entity_id' );
          $query->addExpression('SUM(vr.field_role_n'.$nid.'_number_vo)');
          if ($user_party_id) {
            $query->condition('vp.field_party_list_party_list', $user_party_id);
          }
          if (is_array($restrict_polling_stations)) {
            $query->condition('vpp.entity_id', $restrict_polling_stations, 'IN');
          }
          $res=$query->execute()->fetchColumn();

          // Save the total for the role
          $total_role[$title] = $res;

          $grand_total+=$res;
        }

        $query = db_select('field_data_field_party', 'p');
        $query->fields('p', array('entity_id'));
        if ($user_party_id) {
          $query->condition('p.field_party_tid', $user_party_id);
        }

        $query->condition('p.bundle', 'volunteers');
        $query = $query->execute();

        $total_volunteers = 0;
        $yes = 0;
        $no = 0;
        $missing = 0;

        while ($nid = $query->fetchColumn()) {
          $node = node_load($nid);

          // un@bellcom.dk, 2012.09.11 moved to here from query section above
          if (is_array($restrict_polling_stations)) {
            if (!in_array($node->field_polling_station[$language->language][0]['nid'], $restrict_polling_stations)) {
              continue;
            }
          }

          if (isset($node->field_polling_station_post[$language->language][0]['value'])) {
            $rolle_id = '';
            $rolle_id = field_get_items('node', $node, 'field_rolle_id');
            if($rolle_id){
              $total_volunteers++;
              $total_volunteers_role[$roles[$rolle_id[0]['nid']]]++;
            }

            if (empty ($node->field_rsvp[$language->language][0]['value'])) {
              $missing++;

              $missing_role[$roles[$rolle_id[0]['nid']]]++;
            }

            else {
              switch (strtolower($node->field_rsvp[$language->language][0]['value'])) {
                case '1': //yes
                  $yes_role[$roles[$rolle_id[0]['nid']]]++;
                  $yes++;
                  break;
                case '2': //no
                case '3': //never
                  $no_role[$roles[$rolle_id[0]['nid']]]++;
                  $no++;
                  break;
              }
            }
          }
        }

        // Overall status
        $block['content'] .= '
          <table>
            <tr>
              <td></td>
              <td></td>
              <td>Mangler</td>
            </tr>

            <tr>
              <td><div class="partistatusenhed">Status total</div></td>
              <td><div class="partistatusenhedvaerdi">' . ($total_volunteers) . '/' . $grand_total . '</div> </td>
              <td> <div class="partistatusenhedvaerdi">' . ($grand_total - ($total_volunteers)) . '</div> </td>
            </tr>

            <tr>
              <td>Bekr√¶ftede</td>
              <td><div class="partistatusenhedvaerdi">' . $yes . '</div> </td>
              <td></td>
            </tr>

            <tr>
              <td>Afviste</td>
              <td><div class="partistatusenhedvaerdi">' . $no . '</div> </td>
              <td></td>
            </tr>

            <tr>
              <td>Afventer svar</td>
              <td><div class="partistatusenhedvaerdi">' . $missing . '</div> </td>
              <td></td>
            </tr>

          </table>';


          // Role status
        $block['content'] .= '<table>
                <tr>
                  <td></td>
                  <td></td>
                  <td>Mangler</td>
                </tr>
          ';

        foreach($roles as $nid =>$title){

          $no = '';
          if($no_role[$title]){
            $no = 'volunteer-status-cancelled';
          }

          if(!$total_volunteers_role[$title]){
            $total_volunteers_role[$title] = 0;
          }

          if(!$total_role[$title]){
            $total_role[$title] = 0;
          }

          $block['content'] .= '
              <tr>
                <td><div class="partistatusenhed">'. $title .'</div></td>
                <td><div class="partistatusenhedvaerdi '. $no .'">'. $total_volunteers_role[$title] . '/' . $total_role[$title] . '</div> </td>
                <td><div class="partistatusenhedvaerdi">' . ($total_role[$title] - ($total_volunteers_role[$title])) . '</div> </td>
              </tr>';
        }

        $block['content'] .= '</table>';
        break;

    case 'party_constituency_status':


      //  loop (valgkredse)
      //    loop (valgsteder)
      //      loop (frivillige)

      // tth: This block creates an array full of data about the pollingstation posts.
      $data = array();
      foreach (entity_load('node', FALSE, array('type' => 'constituency')) as $constituency) {
        $data[$constituency->title] = array();
        $polling_station_nids = db_select('field_data_field_constituency', 'c')
          ->fields('c', array('entity_id'))
          ->condition('c.field_constituency_nid', $constituency->nid)
          ->execute()
          ->fetchAll(PDO::FETCH_COLUMN)
        ;

        foreach (node_load_multiple($polling_station_nids) as $polling_station) {          
         //new version 13.09.2013 juulia@blueflex.eu
          $entity_ids=array(); 
          $data[$constituency->title][$polling_station->nid]['title']=$polling_station->title;

          if ($items=field_get_items('node', $polling_station, 'field_volunteers_pr_party_1')){
            foreach(array_values($items) as $value)
                $entity_ids[]= $value['value']; 
          }
          foreach($roles as $nid =>$title){
            if(!isset($data[$constituency->title][$polling_station->nid][$nid]['needed'])){
              $data[$constituency->title][$polling_station->nid][$nid]['needed']=0;
            }
            if (!empty($entity_ids)) {
              $query = db_select('field_data_field_role_n'.$nid, 'vr');
              $query->innerJoin('field_data_field_party_list', 'vpp', 'vpp.entity_id=vr.entity_id');
              $query->addExpression('SUM(vr.field_role_n'.$nid.'_number_vo)');
              $query->condition('vpp.entity_id',$entity_ids, 'IN');
              if ($user_party_id) {
                $query->condition('vpp.field_party_list_party_list', $user_party_id);
                }
              $res=$query->execute()
                        ->fetchColumn();

              $data[$constituency->title][$polling_station->nid][$nid]['needed']+=$res;
            }
          }
        }
      }

      $output = '';

      ksort($data);

      // tth: This block uses the data from above to create som tables with an overview
      // of the posts on the polling station.
      foreach ($data as $constituency => $constituency_data) {
        $total=array();
        $table = array(
            'sticky' => FALSE,
            'header' => array_merge(array(
            $constituency,
            ), array_values($roles)),
            'rows' => array()
          );

        // Add "i alt" label to header
        $table['header']['total'] = 'I alt';

        foreach ($constituency_data as $id => $polling_station_data) {
          // Restrict list on frontpage, so the user cannot to see other polling stations
          // than he is allowed to.
          if (is_array($restrict_polling_stations) && !in_array($id, $restrict_polling_stations)) {
            continue;
          }

          $volunteers_data=array();

          $table['rows'][] =array(
            array('data' => l($polling_station_data['title'], 'volunteers/station/' . $id), 'class' => 'valgsted'));

          $row_nr=count($table['rows'])-1;

          // Variables for storing polling station totals
          $polling_station_needed_total = 0;
          $polling_station_total_total = 0;

          foreach($roles as $nid=>$title){
            // tth: Count posts in a new way
            // If the user_party_id is not set, we set it as a wildcard.
            // this gets ud all posts with the roles for the 
            $party_id = $user_party_id;

            if(!$party_id){
              $party_id = '%';
            }
            $station_role_id = $party_id . $nid . $id;

            // tth: Query the volunteers nodes
            $volunteer_query = new EntityFieldQuery();
            $volunteer_query->fieldCondition('field_polling_station_post', 'value', $station_role_id, 'like')
              ->entityCondition('bundle', 'volunteers')
              ->entityCondition('entity_type', 'node')
              ->propertyCondition('status', 1);
            $volunteers_array = reset($volunteer_query->execute());

            $volunteer_nids = array_keys($volunteers_array);

            $role_cancelled = '';

            $rsvp = db_query('SELECT *
              FROM  `field_data_field_rsvp`
              WHERE  `entity_id`
              IN ( :volunteer_nids )
              AND `field_rsvp_value`
              IN ( :rsvp_values) ', array(
                ':volunteer_nids' => $volunteer_nids,
                ':rsvp_values' => array(2, 3))
              )
              ->fetchAll();

            if(!empty($rsvp)){
              $role_cancelled = ' volunteer-status-cancelled';
            }

            // tth: Count on an empty array returned 1. Workaround be here.:
            $count = 0;
            if(!empty($volunteers_array)){
              $count = count($volunteers_array);
            }

            // tth: Count totals
            // For rows:
            $polling_station_needed_total += $polling_station_data[$nid]['needed'];
            $polling_station_total_total += $count;

            // For columns:
            $total[$nid]['needed']+= $polling_station_data[$nid]['needed'];
            $total[$nid]['total'] += $count;

            $table['rows'][$row_nr][]=array(
                'data' => $count . '/' . $polling_station_data[$nid]['needed'], 'class' => 'vafva' . $role_cancelled,
            );
          }

          // Add totals column to the row.
          $table['rows'][$row_nr][]=array(
              'data' => $polling_station_total_total . '/' . $polling_station_needed_total, 'class' => 'vafva',
          );
        }

        if (count($table['rows'])) {
          $table['rows'][][] = array('data' => 'I alt', 'class' => 'total');
          $row_nr=count($table['rows'])-1;
          foreach($roles as $nid=>$title){
              $table['rows'][$row_nr][]=array('data' => $total[$nid]['total'] . '/' . $total[$nid]['needed'], 'class' => 'total');
          }
          // Make the table pretty, add an empty field to the bottom row
          $table['rows'][$row_nr][]=array('data' => '', 'class' => 'total');
          $output .= theme('table', $table);
        }
      }
      $block['content'] = $output;
      break;
    }
  return $block;
}
